# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from pandas.core.common import random_state
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Get dataset
df_sal = pd.read_csv('tips.csv')
df_sal.head()

# Describe data
df_sal.describe()

# Feature Types
df_sal.info()

# Check for missing values
print(df_sal.isnull().sum())

# A preview of Outlier Values
df_sal.describe().T

# Create a boxplot to visualize the distribution and outliers of 'tip' and 'total_bill'
plt.figure(figsize=(12, 6))

# Boxplot for 'tip'
plt.subplot(1, 2, 1)
sns.boxplot(x='tip', data=df_sal, color='skyblue')
plt.title('Distribution of Tip')

# Boxplot for 'total_bill'
plt.subplot(1, 2, 2)
sns.boxplot(x='total_bill', data=df_sal, color='lightgreen')
plt.title('Distribution of Total Bill')

plt.tight_layout()
plt.show()

# Plot the scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='tip', y='total_bill', data=df_sal, color='red', alpha=0.7)
plt.xlabel('Tip ($)')
plt.ylabel('Total Bill ($)')
plt.title('Tip Amount vs. Total Bill')
plt.tight_layout()
plt.show()

# Define the independent variable (X) and dependent variable (y)
X = df_sal[['total_bill']]
y = df_sal['tip']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Calculate the coefficients
coefficients = model.coef_
intercept = model.intercept_

print("Coefficients:", coefficients[0])
print("Intercept:", intercept)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculate the Mean Squared Error and R^2 score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

# Visualize the linear regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Linear regression line')
plt.xlabel('Total Bill ($)')
plt.ylabel('Tip ($)')
plt.title('Tip Amount Prediction')
plt.legend()
plt.tight_layout()
plt.show()
